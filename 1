class TreeNode:
    def __init__(self, key):
        self.left = None
        self.right = None
        self.val = key

class BinaryTree:
    def __init__(self, root_key):
        self.root = TreeNode(root_key)

    def find_height(self, node):
        if node is None:
            return -1
        left_height = self.find_height(node.left)
        right_height = self.find_height(node.right)
        return max(left_height, right_height) + 1

    def pre_order_traversal(self, node):
        if node:
            print(node.val, end=' ')
            self.pre_order_traversal(node.left)
            self.pre_order_traversal(node.right)

    def in_order_traversal(self, node):
        if node:
            self.in_order_traversal(node.left)
            print(node.val, end=' ')
            self.in_order_traversal(node.right)

    def post_order_traversal(self, node):
        if node:
            self.post_order_traversal(node.left)
            self.post_order_traversal(node.right)
            print(node.val, end=' ')

    def print_leaves(self, node):
        if node:
            if node.left is None and node.right is None:
                print(node.val, end=' ')
            self.print_leaves(node.left)
            self.print_leaves(node.right)

    def bfs(self):
        if not self.root:
            return []

        result = []
        queue = [self.root]

        while queue:
            node = queue.pop(0)
            result.append(node.val)
            if node.left:
                queue.append(node.left)
            if node.right:
                queue.append(node.right)

        return result

    def dfs(self):
        if not self.root:
            return []

        result = []
        stack = [self.root]

        while stack:
            node = stack.pop()
            result.append(node.val)
            if node.right:
                stack.append(node.right)
            if node.left:
                stack.append(node.left)

        return result

    def sum_left_leaves(self, node):
        if not node:
            return 0

        if node.left and not node.left.left and not node.left.right:
            return node.left.val + self.sum_left_leaves(node.right)
        else:
            return self.sum_left_leaves(node.left) + self.sum_left_leaves(node.right)

    def sum_perfect_binary_tree(self, node, level=1):
        if not node:
            return 0

        if not node.left and not node.right:
            return node.val * level

        return (self.sum_perfect_binary_tree(node.left, level + 1) +
                self.sum_perfect_binary_tree(node.right, level + 1))

    def count_subtrees_with_sum(self, node, target_sum):
        if not node:
            return 0

        left_sum = self.count_subtrees_with_sum(node.left, target_sum)
        right_sum = self.count_subtrees_with_sum(node.right, target_sum)
        current_sum = left_sum + right_sum + node.val

        if current_sum == target_sum:
            return 1 + left_sum + right_sum
        else:
            return left_sum + right_sum

    def max_level_sum(self):
        if not self.root:
            return 0

        max_sum = float('-inf')
        result = 0
        queue = [self.root]

        while queue:
            level_sum = sum(node.val for node in queue)
            if level_sum > max_sum:
                max_sum = level_sum
                result = queue[0].val
            queue = [child for node in queue for child in (node.left, node.right) if child]

        return result

    def print_odd_level_nodes(self, node, level=1):
        if node:
            if level % 2 != 0:
                print(node.val, end=' ')
            self.print_odd_level_nodes(node.left, level + 1)
            self.print_odd_level_nodes(node.right, level + 1)

# Example usage:
tree = BinaryTree(1)
tree.root.left = TreeNode(2)
tree.root.right = TreeNode(3)
tree.root.left.left = TreeNode(4)
tree.root.left.right = TreeNode(5)
tree.root.right.left = TreeNode(6)
tree.root.right.right = TreeNode(7)

print("Height of the tree:", tree.find_height(tree.root))
print("Preorder Traversal:")
tree.pre_order_traversal(tree.root)
print("\nInorder Traversal:")
tree.in_order_traversal(tree.root)
print("\nPostorder Traversal:")
tree.post_order_traversal(tree.root)
print("\nLeaves:")
tree.print_leaves(tree.root)
print("\nBFS:")
print(tree.bfs())
print("DFS:")
print(tree.dfs())
print("Sum of left leaves:", tree.sum_left_leaves(tree.root))
print("Sum of all nodes in perfect binary tree:", tree.sum_perfect_binary_tree(tree.root))
print("Count subtrees with sum 10:", tree.count_subtrees_with_sum(tree.root, 10))
print("Max level sum node:", tree.max_level_sum())
print("Nodes at odd levels:")
tree.print_odd_level_nodes(tree.root)
